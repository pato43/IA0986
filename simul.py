import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px

# Configuraci√≥n inicial
st.set_page_config(
    page_title="Sistema de Evaluaci√≥n y Gesti√≥n de Cotizaciones",
    page_icon="üíº",
    layout="wide",
)

# Encabezado principal
st.title("Sistema de Evaluaci√≥n y Gesti√≥n de Cotizaciones üíº")
st.write(
    """
    Este sistema permite gestionar cotizaciones, evaluar su complejidad y relevancia, 
    y administrar usuarios y roles de manera interactiva.
    """
)

# --------------------- Clasificaci√≥n de Cotizaciones ---------------------
st.header("Clasificaci√≥n de Cotizaciones üìÑ")

# Tipos de cotizaci√≥n definidos
tipos_cotizacion = {
    "Doble A": {"min": 200000, "max": 500000},
    "Triple A": {"min": 1000000, "max": 20000000},
}

# Datos simulados de cotizaciones
cotizaciones_df = pd.DataFrame({
    "ID_Cotizaci√≥n": range(1, 11),
    "Cliente": [f"Cliente {i}" for i in range(1, 11)],
    "Monto": np.random.randint(100000, 5000000, 10),
    "Complejidad": np.random.choice(["Alta", "Media", "Baja"], 10),
    "Estatus": np.random.choice(["Aceptada", "Pendiente", "Rechazada"], 10),
})

# Funci√≥n para clasificar cotizaciones
def clasificar_cotizacion(row):
    for tipo, rango in tipos_cotizacion.items():
        if rango["min"] <= row["Monto"] <= rango["max"]:
            return tipo
    return "Otra"

cotizaciones_df["Clasificaci√≥n"] = cotizaciones_df.apply(clasificar_cotizacion, axis=1)

# Mostrar tabla interactiva
st.write("### Cotizaciones Clasificadas:")
st.dataframe(cotizaciones_df)

# Generar un DataFrame con las clasificaciones y sus conteos
clasificacion_resumen = cotizaciones_df["Clasificaci√≥n"].value_counts().reset_index()
clasificacion_resumen.columns = ["Clasificaci√≥n", "Cantidad"]

# Gr√°fico interactivo de clasificaci√≥n
st.write("### Distribuci√≥n por Clasificaci√≥n:")
fig_clasificacion = px.bar(
    clasificacion_resumen,
    x="Clasificaci√≥n",
    y="Cantidad",
    labels={"Clasificaci√≥n": "Tipo de Cotizaci√≥n", "Cantidad": "N√∫mero de Cotizaciones"},
    title="Distribuci√≥n de Cotizaciones por Clasificaci√≥n",
    text_auto=True,
    color="Clasificaci√≥n",
)
st.plotly_chart(fig_clasificacion, use_container_width=True)

# --------------------- Captura de Cotizaciones ---------------------
st.header("Captura de Cotizaciones ‚úèÔ∏è")

# Formulario para captura de cotizaci√≥n
st.write("### Captura Manual:")
id_cotizacion = st.number_input("ID Cotizaci√≥n", min_value=1, step=1, value=len(cotizaciones_df) + 1)
cliente = st.text_input("Cliente", value=f"Cliente {len(cotizaciones_df) + 1}")
monto = st.number_input("Monto (MXN)", min_value=0, step=1000)
complejidad = st.selectbox("Complejidad", ["Alta", "Media", "Baja"])
estatus = st.selectbox("Estatus", ["Aceptada", "Pendiente", "Rechazada"])

# Bot√≥n para capturar datos
if st.button("Capturar Cotizaci√≥n"):
    nueva_cotizacion = {
        "ID_Cotizaci√≥n": id_cotizacion,
        "Cliente": cliente,
        "Monto": monto,
        "Complejidad": complejidad,
        "Estatus": estatus,
        "Clasificaci√≥n": clasificar_cotizacion({"Monto": monto}),
    }
    cotizaciones_df = pd.concat([cotizaciones_df, pd.DataFrame([nueva_cotizacion])], ignore_index=True)
    st.success("Cotizaci√≥n capturada correctamente.")
    st.dataframe(cotizaciones_df)

# Opci√≥n para capturar datos simulados de campo
st.write("### Captura Simulada desde Campo:")
captura_simulada = st.radio(
    "Seleccione un tipo de captura:",
    ["V√≠a telef√≥nica", "En campo", "Automatizada"]
)
st.info(f"Captura seleccionada: {captura_simulada}")

# Visualizaci√≥n de cambios actualizados
st.write("### Cotizaciones Actualizadas:")
st.dataframe(cotizaciones_df)
# --------------------- Asignaci√≥n y Flujo de Trabajo ---------------------
st.header("Asignaci√≥n y Flujo de Trabajo üìã")

# Simulaci√≥n de usuarios y roles
usuarios_roles = pd.DataFrame({
    "Usuario": ["Antonia", "Eduardo", "Luis Carlos", "Gerente A", "Vendedor 1", "Vendedor 2"],
    "Rol": ["Supervisora", "Gerente Estrat√©gico", "Gerente Estrat√©gico", "Coordinador", "Vendedor", "Vendedor"],
})

# Mostrar tabla de roles
st.write("### Roles y Responsabilidades:")
st.dataframe(usuarios_roles)

# Flujo de trabajo de las cotizaciones
st.write("### Flujo de Trabajo de las Cotizaciones:")
flujo_trabajo = [
    {"Etapa": "Captura inicial", "Responsable": "Vendedor"},
    {"Etapa": "Clasificaci√≥n", "Responsable": "Antonia (Supervisora)"},
    {"Etapa": "Revisi√≥n", "Responsable": "Coordinador o Gerente"},
    {"Etapa": "Aprobaci√≥n Estrat√©gica", "Responsable": "Eduardo o Luis Carlos"},
    {"Etapa": "Presupuesto Final", "Responsable": "Gerente Estrat√©gico"},
]
df_flujo = pd.DataFrame(flujo_trabajo)
st.dataframe(df_flujo)

# Asignaci√≥n de cotizaciones a usuarios
st.write("### Asignaci√≥n de Cotizaciones:")
usuario_seleccionado = st.selectbox("Selecciona un usuario para asignar cotizaciones:", usuarios_roles["Usuario"])
cotizaciones_disponibles = cotizaciones_df[cotizaciones_df["Estatus"] == "Pendiente"]

# Tabla de cotizaciones pendientes
st.write("Cotizaciones pendientes:")
st.dataframe(cotizaciones_disponibles)

# Bot√≥n para asignar cotizaci√≥n
cotizacion_asignada = st.selectbox("Selecciona una cotizaci√≥n para asignar:", cotizaciones_disponibles["ID_Cotizaci√≥n"])
if st.button("Asignar Cotizaci√≥n"):
    st.success(f"Cotizaci√≥n {cotizacion_asignada} asignada a {usuario_seleccionado}.")

# --------------------- Monitoreo y Alertas ---------------------
st.header("Monitoreo y Alertas üö¶")

# Simulaci√≥n de estados de las cotizaciones
cotizaciones_df["D√≠as Restantes"] = np.random.randint(-5, 10, len(cotizaciones_df))
cotizaciones_df["Estado Sem√°foro"] = pd.cut(
    cotizaciones_df["D√≠as Restantes"],
    bins=[-float("inf"), 0, 3, float("inf")],
    labels=["Rojo", "Amarillo", "Verde"]
)

# Sistema de sem√°foros
st.write("### Sistema de Sem√°foros:")
st.markdown(
    """
    - **Rojo:** Tareas vencidas.
    - **Amarillo:** Tareas pr√≥ximas a vencer.
    - **Verde:** Tareas completadas o con tiempo suficiente.
    """
)

# Mostrar cotizaciones con sem√°foro
st.write("### Estado de las Cotizaciones:")
fig_semaforo = px.bar(
    cotizaciones_df,
    x="ID_Cotizaci√≥n",
    y="D√≠as Restantes",
    color="Estado Sem√°foro",
    title="Estado de las Cotizaciones (Sistema de Sem√°foros)",
    color_discrete_map={"Rojo": "red", "Amarillo": "yellow", "Verde": "green"},
    text_auto=True,
)
st.plotly_chart(fig_semaforo, use_container_width=True)

# Filtrar por estado de sem√°foro
estado_filtrado = st.selectbox("Filtrar por estado de sem√°foro:", ["Todos", "Rojo", "Amarillo", "Verde"])
if estado_filtrado != "Todos":
    cotizaciones_filtradas = cotizaciones_df[cotizaciones_df["Estado Sem√°foro"] == estado_filtrado]
else:
    cotizaciones_filtradas = cotizaciones_df

st.write("### Cotizaciones Filtradas por Estado:")
st.dataframe(cotizaciones_filtradas)

# Alertas personalizadas
st.write("### Alertas Personalizadas:")
for _, row in cotizaciones_filtradas.iterrows():
    if row["Estado Sem√°foro"] == "Rojo":
        st.error(f"‚ö†Ô∏è Cotizaci√≥n {row['ID_Cotizaci√≥n']} est√° vencida. Urgente revisi√≥n.")
    elif row["Estado Sem√°foro"] == "Amarillo":
        st.warning(f"‚ö†Ô∏è Cotizaci√≥n {row['ID_Cotizaci√≥n']} est√° pr√≥xima a vencer.")
    else:
        st.success(f"‚úîÔ∏è Cotizaci√≥n {row['ID_Cotizaci√≥n']} est√° en buen estado.")
# --------------------- Evaluaciones y M√©tricas ---------------------
st.header("Evaluaciones y M√©tricas üìä")

# Timeline del proyecto
st.subheader("Timeline del Proyecto üìÖ")
cotizaciones_df["D√≠as para Finalizar"] = cotizaciones_df["D√≠as Restantes"] + np.random.randint(5, 30, len(cotizaciones_df))
fig_timeline = px.timeline(
    cotizaciones_df,
    x_start="D√≠as Restantes",
    x_end="D√≠as para Finalizar",
    y="Cliente",
    title="Timeline de Proyectos por Cliente",
    color="Estado Sem√°foro",
    labels={"D√≠as Restantes": "Inicio", "D√≠as para Finalizar": "Fin"},
    color_discrete_map={"Rojo": "red", "Amarillo": "yellow", "Verde": "green"},
)
fig_timeline.update_yaxes(categoryorder="total ascending")
st.plotly_chart(fig_timeline, use_container_width=True)

# Indicadores visuales para evaluar completitud de datos
st.subheader("Checkpoints de Evaluaci√≥n ‚úÖ")
cotizaciones_df["Check Completo"] = cotizaciones_df.apply(
    lambda x: "‚úÖ Completo" if x["Monto"] > 100000 and x["Estado Sem√°foro"] == "Verde" else "‚ö†Ô∏è Pendiente", axis=1
)
st.write("### Estado de Checkpoints:")
st.dataframe(cotizaciones_df[["ID_Cotizaci√≥n", "Cliente", "Check Completo"]])

# Generaci√≥n autom√°tica de bonos
st.subheader("Bonos Autom√°ticos üí∞")
cotizaciones_df["Bono"] = cotizaciones_df.apply(
    lambda x: 5000 if x["Estado Sem√°foro"] == "Verde" and x["Estatus"] == "Aceptada" else 0, axis=1
)
st.write("### Bonos Generados:")
st.dataframe(cotizaciones_df[["ID_Cotizaci√≥n", "Cliente", "Bono"]])

# --------------------- Seguimiento Postventa ---------------------
st.header("Seguimiento Postventa üì¶")

# Indicadores de avance
st.subheader("Indicadores de Avance üìà")
cotizaciones_df["Porcentaje Avance"] = np.random.randint(50, 100, len(cotizaciones_df))
fig_avance = px.bar(
    cotizaciones_df,
    x="Cliente",
    y="Porcentaje Avance",
    title="Porcentaje de Avance por Proyecto",
    text_auto=True,
    color="Porcentaje Avance",
    color_continuous_scale=px.colors.sequential.Viridis,
)
st.plotly_chart(fig_avance, use_container_width=True)

# Retroalimentaci√≥n y mejoras
st.subheader("Retroalimentaci√≥n y Mejoras üì¢")
st.write("### Comentarios de Clientes:")
retroalimentacion = st.text_area("Ingresa comentarios sobre mejoras y experiencias:", height=150)
if st.button("Guardar Retroalimentaci√≥n"):
    st.success("Retroalimentaci√≥n guardada exitosamente.")
    st.info(f"Comentarios ingresados: {retroalimentacion}")

# --------------------- Generaci√≥n de Reportes ---------------------
st.header("Generaci√≥n de Reportes üìë")

# Personalizaci√≥n del reporte
st.subheader("Personaliza tu Reporte üìã")
columnas_seleccionadas = st.multiselect(
    "Selecciona las columnas para incluir en el reporte:",
    cotizaciones_df.columns,
    default=["ID_Cotizaci√≥n", "Cliente", "Monto", "Estatus"]
)

# Generar CSV
@st.cache_data
def generar_csv_reporte(df, columnas):
    return df[columnas].to_csv(index=False).encode('utf-8')

csv_reporte = generar_csv_reporte(cotizaciones_df, columnas_seleccionadas)
st.download_button(
    label="Descargar Reporte en CSV üì•",
    data=csv_reporte,
    file_name="reporte_cotizaciones.csv",
    mime="text/csv",
)

# Generar PDF
st.write("### Generaci√≥n de Reporte en PDF:")
if st.button("Generar Reporte PDF"):
    st.info("‚ö†Ô∏è La funcionalidad de PDF est√° en desarrollo. Por ahora, descarga el CSV.")

# Resumen general
st.subheader("Resumen General üåü")
st.write("### Estad√≠sticas de Cotizaciones:")
st.write(cotizaciones_df[["Monto", "Porcentaje Avance", "Bono"]].describe())
